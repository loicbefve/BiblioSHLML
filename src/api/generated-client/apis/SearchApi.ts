/* tslint:disable */
/* eslint-disable */
/**
 * Biblio API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Factum,
  FondsDocumentaire,
  FondsJohannique,
  Imprime,
  IndexPaysLorrain,
  Manuscrit,
} from '../models/index';
import {
    FactumFromJSON,
    FactumToJSON,
    FondsDocumentaireFromJSON,
    FondsDocumentaireToJSON,
    FondsJohanniqueFromJSON,
    FondsJohanniqueToJSON,
    ImprimeFromJSON,
    ImprimeToJSON,
    IndexPaysLorrainFromJSON,
    IndexPaysLorrainToJSON,
    ManuscritFromJSON,
    ManuscritToJSON,
} from '../models/index';

export interface SearchFactumsGetRequest {
    author?: string;
    title?: string;
    keywords?: string;
}

export interface SearchFondsDocumentaireGetRequest {
    author?: string;
    title?: string;
    keywords?: string;
}

export interface SearchFondsJohanniqueGetRequest {
    author?: string;
    title?: string;
    keywords?: string;
}

export interface SearchImprimesGetRequest {
    author?: string;
    title?: string;
    keywords?: string;
}

export interface SearchIndexPaysLorrainGetRequest {
    keywords?: string;
}

export interface SearchManuscritsGetRequest {
    keywords?: string;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Search for factums
     */
    async searchFactumsGetRaw(requestParameters: SearchFactumsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Factum>>> {
        const queryParameters: any = {};

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['keywords'] != null) {
            queryParameters['keywords'] = requestParameters['keywords'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/factums`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FactumFromJSON));
    }

    /**
     * Search for factums
     */
    async searchFactumsGet(requestParameters: SearchFactumsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Factum>> {
        const response = await this.searchFactumsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for fonds documentaire
     */
    async searchFondsDocumentaireGetRaw(requestParameters: SearchFondsDocumentaireGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FondsDocumentaire>>> {
        const queryParameters: any = {};

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['keywords'] != null) {
            queryParameters['keywords'] = requestParameters['keywords'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/fonds_documentaire`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FondsDocumentaireFromJSON));
    }

    /**
     * Search for fonds documentaire
     */
    async searchFondsDocumentaireGet(requestParameters: SearchFondsDocumentaireGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FondsDocumentaire>> {
        const response = await this.searchFondsDocumentaireGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for fonds johannique
     */
    async searchFondsJohanniqueGetRaw(requestParameters: SearchFondsJohanniqueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FondsJohannique>>> {
        const queryParameters: any = {};

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['keywords'] != null) {
            queryParameters['keywords'] = requestParameters['keywords'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/fonds_johannique`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FondsJohanniqueFromJSON));
    }

    /**
     * Search for fonds johannique
     */
    async searchFondsJohanniqueGet(requestParameters: SearchFondsJohanniqueGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FondsJohannique>> {
        const response = await this.searchFondsJohanniqueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for imprimes
     */
    async searchImprimesGetRaw(requestParameters: SearchImprimesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Imprime>>> {
        const queryParameters: any = {};

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['keywords'] != null) {
            queryParameters['keywords'] = requestParameters['keywords'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/imprimes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImprimeFromJSON));
    }

    /**
     * Search for imprimes
     */
    async searchImprimesGet(requestParameters: SearchImprimesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Imprime>> {
        const response = await this.searchImprimesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for index pays lorrain
     */
    async searchIndexPaysLorrainGetRaw(requestParameters: SearchIndexPaysLorrainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndexPaysLorrain>>> {
        const queryParameters: any = {};

        if (requestParameters['keywords'] != null) {
            queryParameters['keywords'] = requestParameters['keywords'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/index_pays_lorrain`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndexPaysLorrainFromJSON));
    }

    /**
     * Search for index pays lorrain
     */
    async searchIndexPaysLorrainGet(requestParameters: SearchIndexPaysLorrainGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndexPaysLorrain>> {
        const response = await this.searchIndexPaysLorrainGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for manuscrits
     */
    async searchManuscritsGetRaw(requestParameters: SearchManuscritsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manuscrit>>> {
        const queryParameters: any = {};

        if (requestParameters['keywords'] != null) {
            queryParameters['keywords'] = requestParameters['keywords'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/manuscrits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ManuscritFromJSON));
    }

    /**
     * Search for manuscrits
     */
    async searchManuscritsGet(requestParameters: SearchManuscritsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manuscrit>> {
        const response = await this.searchManuscritsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
